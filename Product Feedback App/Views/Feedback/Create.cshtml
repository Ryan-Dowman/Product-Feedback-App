@model Product_Feedback_App.Models.View.FeedbackCreateViewModel
@{
}

<div class="formPageContainer">
    <a class="back">Go Back</a>
    <form class="form" method="post">
        <div class="formCircle">
            <img src="/images/icons/plus.svg" alt="Create Feedback" />
        </div>
        <h2>Create New Feedback</h2>
        <div class="formInputContainers">
            <div class="formInputLabelContainer">
                <label for="feedbackTitle" class="labelPrimary">Feedback Title</label>
                <label for="feedbackTitle" class="labelSecondary">Add a short, descriptive headline</label>
                <input id="feedbackTitle" type="text" autocomplete="off" />
                <span></span>
            </div>

            <div class="formInputLabelContainer">
                <label for="select" class="labelPrimary">Category</label>
                <label for="category" class="labelSecondary">Choose a category for your feedback</label>
                <div class="custom-select">
                    <select id="select">
                        <option value="1">Feature</option>
                        <option value="2">UI</option>
                        <option value="3">UX</option>
                        <option value="4">Enhancement</option>
                        <option value="5">Bug</option>
                    </select>
                </div>
                <span></span>
            </div>

            <div class="formInputLabelContainer">
                <label for="feedbackDetail" class="labelPrimary">Feedback Detail</label>
                <label for="feedbackDetail" class="labelSecondary">Include any specific comments on what should be improved, added, etc.</label>
                <textarea id="feedbackDetail" autocomplete="off"></textarea>
                <span></span>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // Need to find labels and apply event listeners to them as well 
        let customSelects = document.getElementsByClassName("custom-select");

        for (let customSelect of customSelects) {
            console.log(customSelect);

            let selectElement = customSelect.getElementsByTagName("select")[0];

            let selectedDiv = document.createElement("div");
            selectedDiv.classList.add("select-selected");
            selectedDiv.innerText = selectElement.options[selectElement.selectedIndex].innerText;

            customSelect.appendChild(selectedDiv);

            let selectOptionsDiv = document.createElement("div");
            selectOptionsDiv.classList.add("select-items", "select-hide");

            for (let selectOptionIndex in Array.from(selectElement.children)) {
                let selectOption = selectElement[selectOptionIndex];

                let selectOptionDiv = document.createElement("div");
                selectOptionDiv.innerText = selectElement[selectOptionIndex].innerHTML;

                selectOptionDiv.addEventListener("click", (event) => customOptionSelect(event));

                selectOptionsDiv.appendChild(selectOptionDiv);
            }

            customSelect.appendChild(selectOptionsDiv);

            selectedDiv.addEventListener("click", (event) => {
                let targetNode = event.target;

                event.stopPropagation();
                closeAllSelect(targetNode);

                targetNode.nextSibling.classList.toggle("select-hide");
                targetNode.classList.toggle("select-arrow-active");
            });
        }

        function closeAllSelect(element) {
            var x, y, i, xl, yl, arrNo = [];
            x = document.getElementsByClassName("select-items");
            y = document.getElementsByClassName("select-selected");
            xl = x.length;
            yl = y.length;
            for (i = 0; i < yl; i++) {
                if (element == y[i]) {
                    arrNo.push(i)
                } else {
                    y[i].classList.remove("select-arrow-active");
                }
            }
            for (i = 0; i < xl; i++) {
                if (arrNo.indexOf(i)) {
                    x[i].classList.add("select-hide");
                }
            }
        }

        function customOptionSelect(event) {
            let targetNode = event.target;

            let parentSelect = targetNode.parentNode.parentNode.getElementsByTagName("select")[0];
            let currentlySelectedDiv = targetNode.parentNode.previousSibling;

            for (let selectOptionIndex in Array.from(parentSelect)) {
                
                let selectOption = parentSelect[selectOptionIndex];
                
                if (selectOption.innerText == targetNode.innerText) {
                    console.log("found value!");

                    parentSelect.selectedIndex = selectOptionIndex;
                    currentlySelectedDiv.innerText = targetNode.innerText;

                    let selectedOptions = targetNode.parentNode.getElementsByClassName("same-as-selected");

                    for (let selectOption of selectedOptions) {
                        selectOption.className = "";
                    }

                    targetNode.classList.add("same-as-selected");
                    break;

                }
            }

        }

        document.addEventListener("click", closeAllSelect);

        // a = new selected item
        // b = new div in option list

        /*
        var x, i, j, l, ll, selElmnt, a, b, c;
        x = document.getElementsByClassName("custom-select");
        l = x.length;
        for (i = 0; i < l; i++) {
          selElmnt = x[i].getElementsByTagName("select")[0];
          ll = selElmnt.length;
          a = document.createElement("DIV");
          a.setAttribute("class", "select-selected");
          a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
          x[i].appendChild(a);
          b = document.createElement("DIV");
          b.setAttribute("class", "select-items select-hide");
          for (j = 1; j < ll; j++) {
            
            
            c = document.createElement("DIV");
            c.innerHTML = selElmnt.options[j].innerHTML;
            c.addEventListener("click", function(e) {
              
                var y, i, k, s, h, sl, yl;
                s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                sl = s.length;
                h = this.parentNode.previousSibling;
                for (i = 0; i < sl; i++) {
                  if (s.options[i].innerHTML == this.innerHTML) {
                    s.selectedIndex = i;
                    h.innerHTML = this.innerHTML;
                    y = this.parentNode.getElementsByClassName("same-as-selected");
                    yl = y.length;
                    for (k = 0; k < yl; k++) {
                      y[k].removeAttribute("class");
                    }
                    this.setAttribute("class", "same-as-selected");
                    break;
                  }
                }
                h.click();
            });
            b.appendChild(c);
          }
          x[i].appendChild(b);
          a.addEventListener("click", function(e) {
              
              e.stopPropagation();
              closeAllSelect(this);
              this.nextSibling.classList.toggle("select-hide");
              this.classList.toggle("select-arrow-active");
            });
        }
        function closeAllSelect(elmnt) {
          
          var x, y, i, xl, yl, arrNo = [];
          x = document.getElementsByClassName("select-items");
          y = document.getElementsByClassName("select-selected");
          xl = x.length;
          yl = y.length;
          for (i = 0; i < yl; i++) {
            if (elmnt == y[i]) {
              arrNo.push(i)
            } else {
              y[i].classList.remove("select-arrow-active");
            }
          }
          for (i = 0; i < xl; i++) {
            if (arrNo.indexOf(i)) {
              x[i].classList.add("select-hide");
            }
          }
        }
        document.addEventListener("click", closeAllSelect);*/
    </script>
}
