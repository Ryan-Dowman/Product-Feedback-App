@model Product_Feedback_App.Models.View.FeedbackCreateViewModel
@{
}

<div class="formPageContainer">
    <a asp-controller="Home" asp-action="Index" class="back">Go Back</a>
    <form class="form" method="post">
        <div class="formCircle">
            <img src="/images/icons/plus.svg" alt="Create Feedback" />
        </div>
        <h2>Create New Feedback</h2>
        <div class="formInputContainers">
            <div class="formInputLabelContainer">
                <label for="feedbackTitle" class="labelPrimary">Feedback Title</label>
                <label for="feedbackTitle" class="labelSecondary">Add a short, descriptive headline</label>
                <input id="feedbackTitle" type="text" autocomplete="off" />
                <span></span>
            </div>

            <div class="formInputLabelContainer">
                <label for="categorySelect" class="labelPrimary">Category</label>
                <label for="categorySelect" class="labelSecondary">Choose a category for your feedback</label>
                <div class="customSelect" id="categorySelect">
                    <select>
                        <option value="a">Feature</option>
                        <option value="b">UI</option>
                        <option value="b">UX</option>
                        <option value="d">Enhancement</option>
                        <option value="e">Bug</option>
                    </select>
                </div>
                <span></span>
            </div>

            <div class="formInputLabelContainer">
                <label for="feedbackDetail" class="labelPrimary">Feedback Detail</label>
                <label for="feedbackDetail" class="labelSecondary">Include any specific comments on what should be improved, added, etc.</label>
                <textarea id="feedbackDetail" autocomplete="off"></textarea>
                <span></span>
            </div>
        </div>
        <div class="formButtons">
            <button class="button grey">Cancel</button>
            <button class="button purple">Add Feedback</button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        let customSelects = document.getElementsByClassName("customSelect");

        for (let customSelect of customSelects) {

            let selectElement = customSelect.getElementsByTagName("select")[0];

            let selectedDiv = document.createElement("div");
            selectedDiv.classList.add("selectSelected");
            selectedDiv.innerText = selectElement.options[selectElement.selectedIndex].innerText;

            customSelect.appendChild(selectedDiv);

            let selectOptionsDiv = document.createElement("div");
            selectOptionsDiv.classList.add("selectItems", "selectHide");

            let targetLabels = Array.from(document.getElementsByTagName("label")).filter(label => label.htmlFor == customSelect.id);

            for (let label of targetLabels) {
                label.addEventListener("click", (event) => {
                    event.preventDefault()

                    let customSelect = document.getElementById(event.target.htmlFor)
                    if (!customSelect) return

                    let selectedDiv = customSelect.querySelector(".selectSelected")
                    let optionsDiv = customSelect.querySelector(".selectItems")

                    if (selectedDiv && optionsDiv) {
                        event.stopPropagation()
                        closeAllSelect(selectedDiv)

                        optionsDiv.classList.toggle("selectHide")
                        selectedDiv.classList.toggle("selectArrowActive")
                    }
                });
            }

            for (let selectOptionIndex in Array.from(selectElement.children)) {
                let selectOption = selectElement[selectOptionIndex];

                let selectOptionDiv = document.createElement("div");
                selectOptionDiv.innerText = selectElement[selectOptionIndex].innerHTML;

                if (selectOptionIndex == 0) selectOptionDiv.classList.add("customSelected");

                selectOptionDiv.addEventListener("click", (event) => customOptionSelect(event));

                selectOptionsDiv.appendChild(selectOptionDiv);
            }

            customSelect.appendChild(selectOptionsDiv);

            selectedDiv.addEventListener("click", (event) => {
                let targetNode = event.target;

                event.stopPropagation();
                closeAllSelect(targetNode);

                targetNode.nextSibling.classList.toggle("selectHide");
                targetNode.classList.toggle("selectArrowActive");
            });
        }

        function closeAllSelect(element) {

            let selectItems = document.getElementsByClassName("selectItems");
            let selectedItems = document.getElementsByClassName("selectSelected");
            let elementIndexArray = [];


            for (let targetElementIndex in Array.from(selectedItems)) {
                
                let targetElement = selectedItems[targetElementIndex];
                
                if (targetElement == element) {
                    elementIndexArray.push(targetElementIndex);
                }else{
                    targetElement.classList.remove("selectArrowActive");
                }
            }

            for (let targetElementIndex in Array.from(selectItems)) {

                let targetElement = selectItems[targetElementIndex];

                if (elementIndexArray.indexOf(targetElementIndex)) {
                    targetElement.classList.add("selectHide");
                }
            }
        }

        function customOptionSelect(event, overrideElement) {
            let targetNode = overrideElement == null ? event.target : overrideElement;

            let parentSelect = targetNode.parentNode.parentNode.getElementsByTagName("select")[0];
            let currentlySelectedDiv = targetNode.parentNode.previousSibling;

            for (let selectOptionIndex in Array.from(parentSelect)) {
                
                let selectOption = parentSelect[selectOptionIndex];
                
                if (selectOption.innerText == targetNode.innerText) {

                    parentSelect.selectedIndex = selectOptionIndex;
                    currentlySelectedDiv.innerText = targetNode.innerText;

                    let selectedOptions = targetNode.parentNode.getElementsByClassName("customSelected");

                    for (let selectOption of selectedOptions) {
                        selectOption.className = "";
                    }

                    targetNode.classList.add("customSelected");
                    break;

                }
            }

        }

        document.addEventListener("click", closeAllSelect);
    </script>
}
