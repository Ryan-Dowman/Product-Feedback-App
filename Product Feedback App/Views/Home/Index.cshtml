@using Microsoft.AspNetCore.Identity
@using Product_Feedback_App.Models.Domain
@using Product_Feedback_App.Models.Enums
@using Product_Feedback_App.Models.Identity
@using Product_Feedback_App.Models.View
@using System.Web

@model HomeIndexViewModel
@inject UserManager<AppUser> userManager
@{
    ViewData["Title"] = "Home Page";
    AppUser? user = await userManager.GetUserAsync(User);
    string suggestionTitle = Model == null ? "0 Suggestions" : Model.FeedbackViewModels.Count == 1 ? "1 Suggestion" : $"{Model.FeedbackViewModels.Count} Suggestions";

    int plannedCount = Model != null ? Model.FeedbackViewModels.Where(feedback => feedback.Feedback.Status == Status.Planned).Count() : 0;
    int progressCount = Model != null ? Model.FeedbackViewModels.Where(feedback => feedback.Feedback.Status == Status.InProgress).Count() : 0;
    int liveCount = Model != null ? Model.FeedbackViewModels.Where(feedback => feedback.Feedback.Status == Status.Live).Count() : 0;

    List<string>? categoriesFilterNames = HttpUtility.UrlDecode(Context.Request.Query["categoriesFilter"].ToString()).Split(",", StringSplitOptions.RemoveEmptyEntries).ToList();
    bool allSelected = categoriesFilterNames.Count == 0;

    Dictionary<string, string> queryParams = Context.Request.Query.ToDictionary(q => q.Key, q => q.Value.ToString());
    queryParams.TryGetValue("orderBy", out string? orderByValue);

    orderByValue = orderByValue is not null ? HttpUtility.UrlDecode(orderByValue) : null;

    string ToggleCategory(string value){
        bool existsAlready = categoriesFilterNames.Contains(value);
        List<string>? temp = new List<string>(categoriesFilterNames);

        if (existsAlready)
        {
            temp.Remove(value);
        }
        else
        {
            temp.Add(value);
        }

        return HttpUtility.UrlEncode(string.Join(",", temp));
    }
    
}

<div id="homeContainer">
    <div id="homeLHS">
        <div class="widget" id="titleWidget">
            <div id="titleTextContainer">
                <p>Frontend Mentor</p>
                <p>Feedback Board</p>
            </div>
        </div>
        <div class="widget" id="categoriesWidget">
            <a class="invisible" asp-area="" asp-controller="Home" asp-action="Index" asp-route-orderBy="@orderByValue" asp-route-categoriesFilter=""><div class="category @(allSelected ? "categoryOn" : "")">All</div></a>
            <a class="invisible" asp-area="" asp-controller="Home" asp-action="Index" asp-route-orderBy="@orderByValue" asp-route-categoriesFilter="@ToggleCategory("UI")"><div class="category @(categoriesFilterNames.Contains("UI") ? "categoryOn" : "")">UI</div></a>
            <a class="invisible" asp-area="" asp-controller="Home" asp-action="Index" asp-route-orderBy="@orderByValue" asp-route-categoriesFilter="@ToggleCategory("UX")"><div class="category @(categoriesFilterNames.Contains("UX") ? "categoryOn" : "")">UX</div></a>
            <a class="invisible" asp-area="" asp-controller="Home" asp-action="Index" asp-route-orderBy="@orderByValue" asp-route-categoriesFilter="@ToggleCategory("Enhancement")"><div class="category @(categoriesFilterNames.Contains("Enhancement") ? "categoryOn" : "")">Enhancement</div></a>
            <a class="invisible" asp-area="" asp-controller="Home" asp-action="Index" asp-route-orderBy="@orderByValue" asp-route-categoriesFilter="@ToggleCategory("Bug")"><div class="category @(categoriesFilterNames.Contains("Bug") ? "categoryOn" : "")">Bug</div></a>
            <a class="invisible" asp-area="" asp-controller="Home" asp-action="Index" asp-route-orderBy="@orderByValue" asp-route-categoriesFilter="@ToggleCategory("Feature")"><div class="category @(categoriesFilterNames.Contains("Feature") ? "categoryOn" : "")">Feature</div></a>
        </div>
        <div class="widget" id="roadmapWidget">
            <div class="widgetHeader">
                <p class="widgetHeaderText">Roadmap</p>
                <a asp-action="Roadmap">View</a>
            </div>
            <div id="roadmapTrackerContainer">
                <div class="roadmapTracker">
                    <div class="roadmapTrackerLHS"><span></span>Planned</div>
                    <p class="roadmapTrackerValue">@plannedCount</p>
                </div>
                <div class="roadmapTracker">
                    <div class="roadmapTrackerLHS"><span></span>In-Progress</div>
                    <p class="roadmapTrackerValue">@progressCount</p>
                </div>
                <div class="roadmapTracker">
                    <div class="roadmapTrackerLHS"><span></span>Live</div>
                    <p class="roadmapTrackerValue">@liveCount</p>
                </div>
            </div>
        </div>
        <div class="widget" id="userWidget">
            <div class="widgetHeader">
                <p class="widgetHeaderText">Logged In As</p>
            </div>
            <div id="userLoggedInContainer">
                <img src="@user?.ProfilePictureUrl" class="pfp" alt="Profile Picture" />
                <p>@user?.UserName</p>
                <a class="invisible" style="margin-left: auto;" asp-controller="Account" asp-action="Logout"><button>Logout</button></a>
            </div>
        </div>
    </div>
    <div id="homeRHS">
        <div id="feedbackBanner">
            <img id="suggestionIcon" src="/images/icons/suggestion.svg" alt="Suggestion Icon"/>
            <p id="suggestionCount">@suggestionTitle</p>
            <div class="customSelect" id="orderBySelect" style="max-width: 200px; height: min-content;">
                <select>
                    <option value="Most Upvotes">Most Upvotes</option>
                    <option value="Least Upvotes">Least Upvotes</option>
                    <option value="Most Comments">Most Comments</option>
                    <option value="Least Comments">Least Comments</option>
                </select>
            </div>
            <a class="invisible" style="margin-left: auto;" asp-controller="Feedback" asp-action="Create"><button class="button purple">+ Add Feedback</button></a>
        </div>
        <div id="feedbackContainer">
            @if (Model != null && Model.FeedbackViewModels.Any())
            {
                foreach (FeedbackViewModel feedbackViewModel in Model.FeedbackViewModels)
                {
                    Feedback feedback = feedbackViewModel.Feedback;
                
                    <div class="feedback">
                        <div class="feedbackLHS">
                            @if (feedbackViewModel.UserHasUpvoted)
                            {
                                <div class="feedbackUpvotes upvoted" id="@feedback.Id">@feedback.Upvotes.Count</div>
                            }
                            else
                            {
                                <div class="feedbackUpvotes" id="@feedback.Id">@feedback.Upvotes.Count</div>
                            }
                            <div class="feedbackTextContainer">
                                <a class="invisible" asp-area="" asp-controller="Feedback" asp-action="View" asp-route-id="@feedback.Id"><p class="feedbackTitle">@feedback.Title</p></a>
                                <p class="feedbackDetails">@feedback.Details</p>
                            </div>
                            <div class="category">@feedback.Category.ToString()</div>
                        </div>
                        <div class="feedbackRHS">
                            <img src="/images/icons/comment.svg" class="comment" />
                            <p>@feedback.Comments.Count</p>
                        </div>
                    </div>
                }
            }
            else
            {
                <div id="noFeedbackContainer"></div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        ApplyEventListenersToUpvoteButtons();

        function ApplyEventListenersToUpvoteButtons() {
            let upvoteButtons = Array.from(document.getElementsByClassName("feedbackUpvotes"));

            for (upvoteButton of upvoteButtons) {
                upvoteButton.addEventListener("click", (event) => {
                    fetch("/api/upvotes/add", {
                        method: "Post",
                        headers: {
                            "Accept": "*/*",
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ feedbackId: upvoteButton.id, userId: "@userManager.GetUserId(User)" })
                    }).then(result => {
                        GenerateNewUpvoteTotal(event.target);
                    });
                });
            }
        }

        function GenerateNewUpvoteTotal(element) {
            fetch(`/api/upvotes/${element.id}/Upvotes`, {
                method: "Get",
                headers: {
                    "Accept": "*/*",
                    "Content-Type": "application/json"
                }
            }).then(reponse => reponse.json()).then(result => {
                document.getElementById(element.id).innerText = result;
                document.getElementById(element.id).classList.toggle("upvoted");
            })
        }

        let customSelects = document.getElementsByClassName("customSelect");

        for (let customSelect of customSelects) {

            let params = window.location.search.split("&");
            let orderByParam = params.find(param => param.includes("orderBy"));
            console.log(orderByParam);
            let orderByValue = orderByParam == undefined || !["Most%20Upvotes", "Least%20Upvotes", "Most%20Comments", "Least%20Comments"].includes(orderByParam.split("=")[1]) ? "" : orderByParam.split("=")[1].replace("%20", " ");
            console.log(orderByValue);
            let selectElement = customSelect.getElementsByTagName("select")[0];

            let selectedDiv = document.createElement("div");
            selectedDiv.classList.add("selectSelected");

            if (orderByValue != "") {
                selectedDiv.innerText = orderByValue;
            } else {
                selectedDiv.innerText = selectElement.options[selectElement.selectedIndex].innerText;
            }

            customSelect.appendChild(selectedDiv);

            let selectOptionsDiv = document.createElement("div");
            selectOptionsDiv.classList.add("selectItems", "selectHide");

            let targetLabels = Array.from(document.getElementsByTagName("label")).filter(label => label.htmlFor == customSelect.id);

            for (let label of targetLabels) {
                label.addEventListener("click", (event) => {
                    event.preventDefault()

                    let customSelect = document.getElementById(event.target.htmlFor)
                    if (!customSelect) return

                    let selectedDiv = customSelect.querySelector(".selectSelected")
                    let optionsDiv = customSelect.querySelector(".selectItems")

                    if (selectedDiv && optionsDiv) {
                        event.stopPropagation()
                        closeAllSelect(selectedDiv)

                        optionsDiv.classList.toggle("selectHide")
                        selectedDiv.classList.toggle("selectArrowActive")
                    }
                });
            }

            for (let selectOptionIndex in Array.from(selectElement.children)) {
                let selectOption = selectElement[selectOptionIndex];

                let selectOptionDiv = document.createElement("div");
                selectOptionDiv.innerText = selectElement[selectOptionIndex].innerHTML;
                if (orderByValue != "") {
                    if (selectOptionDiv.innerText == orderByValue) selectOptionDiv.classList.add("customSelected");
                }else{
                    if (selectOptionIndex == 0) selectOptionDiv.classList.add("customSelected");
                }

                selectOptionDiv.addEventListener("click", (event) => customOptionSelect(event));

                selectOptionsDiv.appendChild(selectOptionDiv);
            }

            customSelect.appendChild(selectOptionsDiv);

            selectedDiv.addEventListener("click", (event) => {
                let targetNode = event.target;

                event.stopPropagation();
                closeAllSelect(targetNode);

                targetNode.nextSibling.classList.toggle("selectHide");
                targetNode.classList.toggle("selectArrowActive");
            });
        }

        function closeAllSelect(element) {

            let selectItems = document.getElementsByClassName("selectItems");
            let selectedItems = document.getElementsByClassName("selectSelected");
            let elementIndexArray = [];


            for (let targetElementIndex in Array.from(selectedItems)) {

                let targetElement = selectedItems[targetElementIndex];

                if (targetElement == element) {
                    elementIndexArray.push(targetElementIndex);
                } else {
                    targetElement.classList.remove("selectArrowActive");
                }
            }

            for (let targetElementIndex in Array.from(selectItems)) {

                let targetElement = selectItems[targetElementIndex];

                if (elementIndexArray.indexOf(targetElementIndex)) {
                    targetElement.classList.add("selectHide");
                }
            }
        }

        function customOptionSelect(event, overrideElement) {

            const params = new URLSearchParams(window.location.search);
            params.set("orderBy", decodeURIComponent(event.target.innerText));
            window.location.href = window.location.pathname + "?" + params.toString().replace(/\+/g, "%20");

            let targetNode = overrideElement == null ? event.target : overrideElement;

            let parentSelect = targetNode.parentNode.parentNode.getElementsByTagName("select")[0];
            let currentlySelectedDiv = targetNode.parentNode.previousSibling;

            for (let selectOptionIndex in Array.from(parentSelect)) {

                let selectOption = parentSelect[selectOptionIndex];

                if (selectOption.innerText == targetNode.innerText) {

                    parentSelect.selectedIndex = selectOptionIndex;
                    currentlySelectedDiv.innerText = targetNode.innerText;

                    let selectedOptions = targetNode.parentNode.getElementsByClassName("customSelected");

                    for (let selectOption of selectedOptions) {
                        selectOption.className = "";
                    }

                    targetNode.classList.add("customSelected");
                    break;

                }
            }

        }

        document.addEventListener("click", closeAllSelect);
    </script>
}
